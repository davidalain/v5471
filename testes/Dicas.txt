
Utilizei as dicas em http://domoticx.com/bestandssysteem-squashfs-tools-software/
E usando o Lubuntu 15.04 x64
Baixei o lzma 4.65 em:
https://sourceforge.net/projects/sevenzip/files/LZMA%20SDK/4.65/
Baixei o squashfs 4.2 em:
https://sourceforge.net/projects/squashfs/files/squashfs/squashfs4.2/
Extrai ambos os arquivos na pasta Downloads, ficando os arquivos nos seguintes caminhos:
~/Downloads/lzma465
e
~/Downloads/squashfs4.2

E realizei as seguintes etapas:

1) Modificar em ~/Downloads/squashfs4.2/squashfs-tools/lzma_wrapper.c o include da lib lzma:

de
#include <lzmalib.h>
para
#include <../../lzma465/C/LzmaLib.h>

2) Modificar ~/Downloads/squashfs4.2/squashfs-tools/Makefile:

de
#LZMA_SUPPORT = 1
para
LZMA_SUPPORT = 1

de
#LZMA_DIR = ../../../../LZMA/lzma465
para
LZMA_DIR = ~/Downloads/lzma465

3) Compilar o squashfs 4.2, executando:
cd ~/Downloads/squashfs4.2/squashfs-tools && make

4) Modificar no repositório v5471 (repositório do projeto criado pelo TripleOxygen no github) o arquivo build_fs.sh:

de 
TOOLS_PREFIX=../../..
$TOOLS_PREFIX/squashfs-4.2/mksquashfs squashfs-root/ build/$1/rootfs -comp lzma -b 65536 -all-root
para
TOOLS_PREFIX=~/Downloads/squashfs4.2/squashfs-tools
$TOOLS_PREFIX/mksquashfs squashfs-root/ build/$1/rootfs -comp lzma -b 65536 -all-root

5) Gerar a imagem custom 42K, executando o script de criação do build na pasta do repositório v5471:
./build.sh NOMEDOBUILD
Daí é gerada uma imagem .bin contendo header, kernel e sistema de arquivos.
Mas esta imagem ainda não funciona.

##########################################################################################################################################

Local onde estão os arquivos modificados por "O3 Labs":

davidalain@davidalain-lubuntu:~/REPOSITORIO_DE_PROJETOS/v5471/squashfs-root$ grep -r "Triple Oxygen" .

./etc/bewan/iad/pt_BR/js/app.javascript:                    <a href='http://www.tripleoxygen.net' target='_blank'>Triple Oxygen</a> |\
./etc/bewan/iad/en_US/js/app.javascript:                    <a href='http://www.tripleoxygen.net' target='_blank'>Triple Oxygen</a> |\
./etc/bewan/scripts/stats/update-webstats:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/scripts/stats/graph.sh:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/scripts/stats/init.sh:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/scripts/stats/update.sh:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/scripts/stats/graph_bins.sh:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/scripts/backup-voice-profile:# 42k Series (C) 2015 Triple Oxygen
./etc/bewan/ip-up.d/S99stats:# 42k Series (C) 2016 Triple Oxygen
./etc/bewan/init.d/initial-backup:# (c) Triple Oxygen - http://www.tripleoxygen.net
./etc/bewan/motd:42k Series (c)2016 Triple Oxygen


##########################################################################################################################################

Notas importantes:

- Os headers de todas as versões 42K são diferentes, e é diferente do header que tá na pasta bin do repositório v5471.

- Os kernels de todas as versões 42K são iguais.

- Apesar de o script do O3 Labs estar usando o LZMA para o sistema de arquivos, o sistema de arquivos usados nos binários disponibilizados são GZIP e não LZMA.

Dicas:

- Usar o binwalk pra descobrir qual o sistema de arquivos de um arquivo (rootfs).

##########################################################################################################################################

Enviar imagem nova para o PACE:

curl -v -H "Expect:" "http://192.168.25.1/cgi-bin/firmware.cgi" -F sFirmwareFile=@B14103-GVT-OXY-42000.bin

##########################################################################################################################################

O Arquivo header é criado para a imagem binário específica, não é genérico.
No header contém o nome do binário, os tamanhos do kernel e rootfs, entre outras coisas.
Se os tamanhos não estiverem corretos, a imagem é inválida.

Próximo passo: Descobrir como gerar o arquivo de header.

##########################################################################################################################################

Escrever dentro de um binário em um posição específica

printf 'shsq' | dd of=test bs=1 seek=$(( 0x20a000 )) count=4 conv=notrunc
printf '\x01' | dd of=test bs=1 seek=$(( 0x20a014 )) count=1 conv=notrunc






